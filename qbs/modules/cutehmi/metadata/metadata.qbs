import qbs
import qbs.File
import qbs.FileInfo
import qbs.Process
import qbs.TextFile
import qbs.Utilities

/**
  This module collects properties defined within Qbs product and generates 'cutehmi.metadata.json' artifact.

  @note product may need to be recompiled in order to compile modified 'json' file into plugin, which uses Q_PLUGIN_METADATA macro.

  @warning generated artifact 'cutehmi.metadata.json' must not be added to the 'files' list of the product!
  Otherwise Qbs will not regenerate it automatically upon source 'qbs' modification.
  */
Module {
	additionalProductTypes: ["cutehmi.metadata.json", "cutehmi.metadata.hpp"]

//<workaround id="qbs.cutehmi.depends-1" target="Qbs" cause="design">
	Parameter { property bool add: false }

//	Parameter 'cutehmi.depends.reqMinor' can be specified within dependencies. It denotes required minor version of the dependency.
//	The build will stop if minor version requirement is not satisfied. This is similar to 'versionAtLeast' parameter
//	functionality provided by Qbs, with a difference, that if 'cutehmi.depends.reqMinor' parameter is set, then dependency will be
//	added to the 'dependencies' list of 'cutehmi.metadata.json' artifact.

	//Depends { name: "cutehmi.depends" }
//</workaround>

	FileTagger {
		patterns: ["*.qbs"]
		fileTags: ["qbs"]
	}

	Rule {
		multiplex: true
		inputs: ["qbs"]
		inputsFromDependencies: "qbs"

		prepare: {
			var productRequiredProperties = [
						'name',
						'version',
						'friendlyName',
						'vendor',
						'description',
						'author',
						'copyright',
						'license'
			]
			for (var prop in productRequiredProperties)
				if (product[productRequiredProperties[prop]] === undefined)
					console.warn("Undefined property 'product." + productRequiredProperties[prop] +"' in '" + product.name + "' (product directory: '" + product.sourceDirectory + "').")

			var jsonCmd = new JavaScriptCommand();
			jsonCmd.description = "generating " + product.sourceDirectory + "/cutehmi.metadata.json"
			jsonCmd.highlight = "codegen";
			jsonCmd.sourceCode = function() {
				console.info("Regenerating file " + product.sourceDirectory + "/cutehmi.metadata.json")

				var metadata = {
					"_comment": "This file has been autogenerated by Qbs cutehmi.metadata module.",
					"name": product.name,
					"version": product.version,
					"friendlyName": product.friendlyName,
					"vendor": product.vendor,
					"description": product.description,
					"author": product.author,
					"copyright": product.copyright,
					"license": product.license,
					"dependencies": []
				}

				for (i in product.dependencies) {
					var dependency = product.dependencies[i]

					if ("cutehmi" in dependency.parameters && "metadata" in dependency.parameters.cutehmi) {
						if (!dependency.parameters.cutehmi.metadata.add)
							continue
					} else
						continue

//<workaround id="qbs.cutehmi.depends-1" target="Qbs" cause="design">
					var reqMinor
					if (product[dependency.name].version !== undefined)
						reqMinor = product[dependency.name].version.split('.')[0]
					// Instead of:
					//	if ("cutehmi" in dependency.parameters && "depends" in dependency.parameters.cutehmi)
					//		reqMinor = dependency.parameters.cutehmi.depends.reqMinor
//</workaround>

					if (reqMinor !== undefined) {
						var metadataDepencency = {
							"name": dependency.name,
							"reqMinor": reqMinor
						}
						metadata.dependencies.push(metadataDepencency)
						if (dependency.version !== undefined)
							if (Number(dependency.version.split('.')[0]) < reqMinor)
								throw "Product '" + product.name + "'"
											  + " requires dependency '" + dependency.name + "'"
											  + " to have minor version number at least '" + reqMinor + "'"
											  + ", while dependency has minor version number '" + Number(dependency.version.split('.')[0]) + "'."
					}
				}

				var f = new TextFile(product.sourceDirectory + "/cutehmi.metadata.json", TextFile.WriteOnly);
				try {
					f.write(JSON.stringify(metadata))
				} finally {
					f.close()
				}
			}

			var hppCmd = new JavaScriptCommand();
			hppCmd.description = "generating " + product.sourceDirectory + "/cutehmi.metadata.hpp"
			hppCmd.highlight = "codegen";
			hppCmd.sourceCode = function() {
				console.info("Regenerating file " + product.sourceDirectory + "/cutehmi.metadata.hpp")

				var f = new TextFile(product.sourceDirectory + "/cutehmi.metadata.hpp", TextFile.WriteOnly);
				try {
					var shortPrefix = product.baseName.toUpperCase()
					var prefix = product.name.toUpperCase()
					var minor = Number(product.version.split('.')[0])

					f.writeLine("#ifndef " + prefix + "_METADATA_HPP")
					f.writeLine("#define " + prefix + "_METADATA_HPP")

					f.writeLine("")
					f.writeLine("// This file has been autogenerated by Qbs cutehmi.metadata module.")
					f.writeLine("")

					f.writeLine("#define " + shortPrefix + "_NAME \"" + product.name + "\"")
					f.writeLine("#define " + shortPrefix + "_VERSION \"" + product.version + "\"")
					f.writeLine("#define " + shortPrefix + "_MAJOR " + product.major + "")

					f.writeLine("")
					f.writeLine("#ifdef " + product.baseName.toUpperCase() + "_BUILD")
					f.writeLine("  #define " + prefix + "_" + minor)
					f.writeLine("#endif")

					for (var m = minor; m > 0; m--) {
						f.writeLine("")
						f.writeLine("#ifdef " + prefix + "_" + m)
						f.writeLine("  #ifndef " + prefix + "_CURRENT ")
						f.writeLine("    #define " + prefix + "_CURRENT " + m)
						f.writeLine("  #endif")
						f.writeLine("  #define " + prefix + "_" + (m - 1))
						f.writeLine("#endif")
					}

					f.writeLine("")
					f.writeLine("#ifndef " + prefix + "_CURRENT ")
					f.writeLine("  #define " + prefix + "_CURRENT 0")
					f.writeLine("#endif")

					f.writeLine("")
					f.writeLine("#endif")
				} finally {
					f.close()
				}
			}

			return [jsonCmd, hppCmd]
		}

		Artifact {
			filePath: product.sourceDirectory + "/cutehmi.metadata.json"
			fileTags: ["cutehmi.metadata.json"]
		}

		Artifact {
			filePath: product.sourceDirectory + "/cutehmi.metadata.hpp"
			fileTags: ["cutehmi.metadata.hpp"]
		}
	}
}
