import qbs
import qbs.TextFile
import qbs.Environment

Module {
	additionalProductTypes: ["cutehmi.dirs.hpp"]

	setupRunEnvironment: {
		if (product.qbs.targetOS.contains("windows"))
			Environment.putEnv("PATH", product.cutehmi.dirs.externalLibDir + product.qbs.pathListSeparator + Environment.getEnv("PATH"))
		else
			Environment.putEnv("LD_LIBRARY_PATH", product.cutehmi.dirs.externalLibDir + product.qbs.pathListSeparator + Environment.getEnv("LD_LIBRARY_PATH"))

		Environment.putEnv("QML2_IMPORT_PATH", product.qbs.installRoot + "/" + product.cutehmi.dirs.extensionInstallDirname)

		Environment.putEnv("CUTEHMI_INSTALL_ROOT", product.qbs.installRoot)
	}

	property bool generateHeaderFile: false

	property string examplesInstallDirname: "examples"
	property string extensionInstallDirname: "bin"
	property string extensionsSourceDir: project.sourceDirectory + "/extensions"
	property string externalDeployDir: project.sourceDirectory + "/external/deploy"
	property string externalLibDir: externalDeployDir + "/lib"
	property string externalIncludeDir: externalDeployDir + "/include"
	property string testInstallDirname: "bin"
	property string toolInstallDirname: "bin"

	FileTagger {
		patterns: ["*.qbs"]
		fileTags: ["qbs"]
	}

	Rule {
		condition: product.cutehmi.dirs.generateHeaderFile
		multiplex: true
		inputs: ["qbs"]
		inputsFromDependencies: "qbs"

		prepare: {
			var hppCmd = new JavaScriptCommand();
			hppCmd.description = "generating " + product.sourceDirectory + "/cutehmi.dirs.hpp"
			hppCmd.highlight = "codegen";
			hppCmd.sourceCode = function() {
				console.info("Regenerating file " + product.sourceDirectory + "/cutehmi.dirs.hpp")

				var f = new TextFile(product.sourceDirectory + "/cutehmi.dirs.hpp", TextFile.WriteOnly);
				try {
					var prefix = "CUTEHMI_DIRS"

					f.writeLine("#ifndef " + prefix + "_HPP")
					f.writeLine("#define " + prefix + "_HPP")

					f.writeLine("")
					f.writeLine("// This file has been autogenerated by Qbs cutehmi.dirs module.")
					f.writeLine("")

					f.writeLine("#define " + prefix + "_TOOL_INSTALL_DIRNAME \"" + product.cutehmi.dirs.toolInstallDirname + "\"")
					f.writeLine("#define " + prefix + "_TEST_INSTALL_DIRNAME \"" + product.cutehmi.dirs.testInstallDirname + "\"")
					f.writeLine("#define " + prefix + "_EXTENSION_INSTALL_DIRNAME \"" + product.cutehmi.dirs.extensionDirname + "\"")
					f.writeLine("")
					f.writeLine("#endif")
				} finally {
					f.close()
				}
			}

			return [hppCmd]
		}

		Artifact {
			filePath: product.sourceDirectory + "/cutehmi.dirs.hpp"
			fileTags: ["cutehmi.dirs.hpp", "hpp"]
		}
	}
}

//(c)MP: Copyright Â© 2019, Michal Policht. All rights reserved.
//(c)MP: This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
