import qbs
import qbs.File
import qbs.FileInfo
import qbs.TextFile

/**
  This module generates 'Doxyfile' artifact, which can be used by Doxygen tool to generate documentation.
  */
Module {
	additionalProductTypes: ["Doxyfile"]

	FileTagger {
		patterns: ["*.qbs"]
		fileTags: ["qbs"]
	}

	Rule {
		inputs: ["qbs"]

		prepare: {
			var doxCmd = new JavaScriptCommand();
			doxCmd.description = "generating " + product.sourceDirectory + "/Doxyfile"
			doxCmd.highlight = "codegen";
			doxCmd.sourceCode = function() {
				console.info("Regenerating file " + product.sourceDirectory + "/Doxyfile")

				var docDir = project.sourceDirectory + '/doc/Doxygen'
				var outputDir = docDir +  '/' + FileInfo.relativePath(project.sourceDirectory, product.sourceDirectory) // Absolute.
				var doxygenOptions = {
					'PROJECT_NAME': product.vendor + ' ' + product.friendlyName + ' (' + product.name + ')',
					'PROJECT_NUMBER': product.major + '.' + product.minor + '.' + product.micro,
					'PROJECT_LOGO': 'doc/project_logo.png',
					'OUTPUT_DIRECTORY': FileInfo.relativePath(product.sourceDirectory, outputDir),
					'ALWAYS_DETAILED_SEC': true,
					'JAVADOC_AUTOBRIEF': true,
					'EXTRACT_ALL': true,
					'INPUT': '.',
					'RECURSIVE': true,
					'USE_MDFILE_AS_MAINPAGE': 'README.md',
					'GENERATE_LATEX': false,
					'GENERATE_TREEVIEW': true,
					'QUIET': true,
					'GENERATE_TAGFILE': 'doxygen.tag'
				}

				//<workaround id="qbs-cutehmi-doxygen-1" target="Doxygen" cause="missing">
				// Doxygen is not able to create whole path recursively (like mkidr -p does) and quits with error, so let's create it for him.
					if (!File.exists(outputDir)) {
						console.info("Creating directory " + outputDir)
						File.makePath(outputDir)
					}
				//</workaround>

				var f = new TextFile(product.sourceDirectory + "/Doxyfile", TextFile.WriteOnly);
				try {
					f.writeLine("# This file has been autogenerated by Qbs cutehmi.doxygen module.")
					for (var option in doxygenOptions) {
						var val = doxygenOptions[option]
						if (typeof val === 'string')
							val = '"' + val + '"'
						else if (typeof val === 'boolean') {
							if (val)
								val = 'YES'
							else
								val = 'NO'
						}
						f.writeLine(option + ' = ' + val)
					}

					// Append tag files to TAGFILES from dependencies.
					for (i in product.dependencies) {
						var dependency = product.dependencies[i]
						if ('cutehmi' in dependency && 'doxygen' in dependency.cutehmi) {
							var dependencyOutputDir = docDir + '/' + FileInfo.relativePath(project.sourceDirectory, dependency.sourceDirectory)	// Absolute.
							var tagLoc = FileInfo.relativePath(product.sourceDirectory, dependency.sourceDirectory) + '/doxygen.tag'
							var htmlLoc = FileInfo.relativePath(outputDir + '/html', dependencyOutputDir + '/html')
							f.writeLine('TAGFILES += ' + '"' +  tagLoc + ' = ' + htmlLoc + '"')
						}
					}
				} finally {
					f.close()
				}
			}
			return [doxCmd]
		}

		Artifact {
			filePath: product.sourceDirectory + "/Doxyfile"
			fileTags: ["Doxyfile"]
		}
	}
}
