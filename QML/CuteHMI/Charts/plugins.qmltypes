import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump CuteHMI.Charts 1.0 QML'

Module {
    dependencies: []
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapFromGlobal"
            revision: 7
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToGlobal"
            revision: 7
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
    Component {
        name: "QQuickPaintedItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Enum {
            name: "RenderTarget"
            values: {
                "Image": 0,
                "FramebufferObject": 1,
                "InvertedYFramebufferObject": 2
            }
        }
        Property { name: "contentsSize"; type: "QSize" }
        Property { name: "fillColor"; type: "QColor" }
        Property { name: "contentsScale"; type: "double" }
        Property { name: "renderTarget"; type: "RenderTarget" }
        Property { name: "textureSize"; type: "QSize" }
    }
    Component {
        name: "cutehmi::charts::CartesianAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::ValueAxis"
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "label"; type: "string" }
        Property { name: "labelOffset"; type: "double" }
        Property { name: "labelPlacement"; type: "double" }
        Property { name: "orientLabel"; type: "bool" }
        Property { name: "labelSpace"; type: "double"; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "thickness"; type: "double" }
        Property { name: "axisPosition"; type: "double" }
    }
    Component {
        name: "cutehmi::charts::DateTimeAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::TickedAxis"
        exports: ["DateTimeAxis 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "interval_t"
            values: {
                "MILLISECONDS": 0,
                "SECONDS": 1,
                "MINUTES": 2,
                "HOURS": 3,
                "DAYS": 4,
                "WEEKS": 5,
                "MONTHS": 6,
                "YEARS": 7
            }
        }
        Property { name: "tickInterval"; type: "interval_t" }
        Property { name: "minorTickInterval"; type: "interval_t" }
    }
    Component {
        name: "cutehmi::charts::LinearAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::TickedAxis"
        exports: ["LinearAxis 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "tickInterval"; type: "double" }
        Property { name: "minorTickInterval"; type: "double" }
        Property { name: "tickLabelPrecision"; type: "int" }
        Property { name: "axisScale"; type: "double" }
        Signal { name: "screenScaleRatioChanged" }
    }
    Component {
        name: "cutehmi::charts::PlotArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["PlotArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "left"; type: "double"; isReadonly: true }
        Property { name: "right"; type: "double"; isReadonly: true }
        Property { name: "top"; type: "double"; isReadonly: true }
        Property { name: "bottom"; type: "double"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "double"; isReadonly: true }
        Property { name: "verticalCenter"; type: "double"; isReadonly: true }
    }
    Component {
        name: "cutehmi::charts::ScatterPlot"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["PointSeries 1.0", "ScatterPlot 1.0"]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "color"; type: "QColor" }
        Property { name: "pointSize"; type: "double" }
        Property { name: "series"; type: "PointSeries"; isPointer: true }
        Property { name: "xAxis"; type: "ValueAxis"; isPointer: true }
        Property { name: "yAxis"; type: "ValueAxis"; isPointer: true }
    }
    Component {
        name: "cutehmi::charts::TickedAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::CartesianAxis"
        Property { name: "tickLabelOffset"; type: "double" }
        Property { name: "tickLabelSpace"; type: "double"; isReadonly: true }
        Property { name: "bounds"; type: "bool" }
        Property { name: "ticks"; type: "bool" }
        Property { name: "minorTicks"; type: "bool" }
    }
    Component {
        name: "cutehmi::charts::ValueAxis"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        Property { name: "from"; type: "double" }
        Property { name: "to"; type: "double" }
        Property { name: "plotArea"; type: "PlotArea"; isPointer: true }
        Signal {
            name: "plotAreaChanged"
            Parameter { name: "oldPlotArea"; type: "PlotArea"; isPointer: true }
        }
    }
}
