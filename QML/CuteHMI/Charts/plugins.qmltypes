import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable CuteHMI.Charts 1.0 QML'

Module {
    dependencies: [
        "QtQuick 2.5",
        "QtQuick.Templates 2.0",
        "QtQuick.Window 2.2"
    ]
    Component {
        name: "cutehmi::charts::CartesianAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::ValueAxis"
        Property { name: "orientation"; type: "Qt::Orientation" }
        Property { name: "label"; type: "string" }
        Property { name: "labelOffset"; type: "double" }
        Property { name: "labelPlacement"; type: "double" }
        Property { name: "orientLabel"; type: "bool" }
        Property { name: "labelSpace"; type: "double"; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "textColor"; type: "QColor" }
        Property { name: "font"; type: "QFont" }
        Property { name: "thickness"; type: "double" }
        Property { name: "axisPosition"; type: "double" }
    }
    Component {
        name: "cutehmi::charts::DateTimeAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::TickedAxis"
        exports: ["CuteHMI.Charts/DateTimeAxis 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "interval_t"
            values: {
                "MILLISECONDS": 0,
                "SECONDS": 1,
                "MINUTES": 2,
                "HOURS": 3,
                "DAYS": 4,
                "WEEKS": 5,
                "MONTHS": 6,
                "YEARS": 7
            }
        }
        Property { name: "tickInterval"; type: "interval_t" }
        Property { name: "minorTickInterval"; type: "interval_t" }
    }
    Component {
        name: "cutehmi::charts::LinearAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::TickedAxis"
        exports: ["CuteHMI.Charts/LinearAxis 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "tickInterval"; type: "double" }
        Property { name: "minorTickInterval"; type: "double" }
        Property { name: "tickLabelPrecision"; type: "int" }
        Property { name: "axisScale"; type: "double" }
        Signal { name: "screenScaleRatioChanged" }
    }
    Component {
        name: "cutehmi::charts::PlotArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["CuteHMI.Charts/PlotArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "left"; type: "double"; isReadonly: true }
        Property { name: "right"; type: "double"; isReadonly: true }
        Property { name: "top"; type: "double"; isReadonly: true }
        Property { name: "bottom"; type: "double"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "double"; isReadonly: true }
        Property { name: "verticalCenter"; type: "double"; isReadonly: true }
    }
    Component {
        name: "cutehmi::charts::ScatterPlot"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: [
            "CuteHMI.Charts/PointSeries 1.0",
            "CuteHMI.Charts/ScatterPlot 1.0"
        ]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "color"; type: "QColor" }
        Property { name: "pointSize"; type: "double" }
        Property { name: "series"; type: "PointSeries"; isPointer: true }
        Property { name: "xAxis"; type: "ValueAxis"; isPointer: true }
        Property { name: "yAxis"; type: "ValueAxis"; isPointer: true }
    }
    Component {
        name: "cutehmi::charts::TickedAxis"
        defaultProperty: "data"
        prototype: "cutehmi::charts::CartesianAxis"
        Property { name: "tickLabelOffset"; type: "double" }
        Property { name: "tickLabelSpace"; type: "double"; isReadonly: true }
        Property { name: "bounds"; type: "bool" }
        Property { name: "ticks"; type: "bool" }
        Property { name: "minorTicks"; type: "bool" }
    }
    Component {
        name: "cutehmi::charts::ValueAxis"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        Property { name: "from"; type: "double" }
        Property { name: "to"; type: "double" }
        Property { name: "plotArea"; type: "PlotArea"; isPointer: true }
        Signal {
            name: "plotAreaChanged"
            Parameter { name: "oldPlotArea"; type: "PlotArea"; isPointer: true }
        }
    }
}
